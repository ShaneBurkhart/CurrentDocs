require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe Api::JobsController do


  before(:each) do
    @manager = FactoryGirl.create :manager
    sign_in @manager
    Job.delete_all
  end
  # This should return the minimal set of attributes required to create a valid
  # Api::Job. As you add validations to Api::Job, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { {
    name: "Job Name",
    user_id: @manager.id
  } }

  describe "GET index" do
    it "should output jobs as json" do
      job = Job.create! valid_attributes
      get :index, {}
      response.body.should == {jobs: [job]}.to_json(include: [:plans, :user, :shared_users])
    end
  end

  describe "GET show" do
    it "should output json for job" do
      job = Job.create! valid_attributes
      get :show, {:id => job.to_param}
      response.body.should == {job: job}.to_json(include: [:plans, :user, :shared_users])
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Job" do
        expect {
          post :create, {:job => valid_attributes}
        }.to change(Job, :count).by(1)
      end

      it "can not be created by viewer" do
        sign_out :user
        sign_in FactoryGirl.create :viewer
        expect {
          post :create, {:job => valid_attributes}
        }.to change(Job, :count).by(0)
      end

      it "should output new job as JSON" do
        job = Job.create! valid_attributes
        post :create, {:job => valid_attributes}
        response.body.should == {job: job}.to_json(include: [:plans, :user, :shared_users])
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested job" do
        update_attr = {name: "Updated Job"}
        job = Job.create! valid_attributes
        put :update, {:id => job.to_param, :job => update_attr}
        response.body.should have_content update_attr[:name]
      end

      it "should output updated job as JSON" do
        job = Job.create! valid_attributes
        put :update, {:id => job.to_param, :job => valid_attributes}
        response.body.should == {job: job}.to_json(include: [:plans, :user, :shared_users])
      end

      it "can not be updated by viewer" do
        job = Job.create! valid_attributes
        sign_out :user
        sign_in FactoryGirl.create :viewer
        put :update, {:id => job.to_param, :job => valid_attributes}
        response.body.should == "You don't have permission to do that"
      end
    end

    describe "with invalid params" do
      it "assigns the job as @job" do
        job = Job.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Job.any_instance.stub(:save).and_return(false)
        put :update, {:id => job.to_param, :job => {  }}
        assigns(:job).should eq(job)
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested job" do
      job = Job.create! valid_attributes
      expect {
        delete :destroy, {:id => job.to_param}
      }.to change(Job, :count).by(-1)
    end
  end

end