require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe Api::SharesController do


  before(:each) do
    Share.delete_all
    @viewer = FactoryGirl.create :viewer
    @manager = FactoryGirl.create :manager
    sign_in @manager
    @job = Job.create user_id: @manager.id, name: "Test Jobs"
  end
  # This should return the minimal set of attributes required to create a valid
  # Api::Job. As you add validations to Api::Job, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { {
    job_id: @job.id,
    email: @viewer.email
  } }

  describe "POST create" do
    describe "with valid params" do
      it "creates a new share" do
        expect {
          post :create, {:share => valid_attributes}
        }.to change(Share, :count).by(1)
        response.body.should == Share.find_by_user_id(@viewer.id).to_json
      end

      it "creates a new share as guest user" do
        email = "SomeEmail@gmail.com"
        expect {
          post :create, {:share => {job_id: @job.id, email: email}}
        }.to change(Share, :count).by(1)
        response.body.should == Share.find_by_user_id(User.find_by_email(email).id).to_json
      end

      it "can not be created by viewer" do
        sign_out :user
        sign_in @viewer
        expect {
          post :create, {:share => valid_attributes}
        }.to change(Share, :count).by(0)
      end

      it "can not be shared with self" do
        expect {
          post :create, {:share => {user_id: @manager.id, job_id: 1}}
        }.to change(Share, :count).by(0)
      end
    end
  end

=begin  describe "PUT update" do
    describe "with valid params" do
      it "accepts the given share" do
        sign_out :user
        sign_in @viewer
        @share = Share.create user_id: @viewer.id, job_id: @job.id
        put :update, {:id => @share.to_param}
        @share = Share.find(@share.id)
        @share.accepted.should == 1
        response.body.should == {share: @share}.to_json
      end
    end
  end
=end
  describe "DELETE destroy" do
    it "destroys the requested share" do
      @share = Share.create user_id: @viewer.id, job_id: @job.id
      expect {
        delete :destroy, {:id => @share.to_param}
      }.to change(Share, :count).by(-1)
    end
  end

end